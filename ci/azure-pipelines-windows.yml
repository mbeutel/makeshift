parameters:
#  revision: 4

  # Vcpkg repository
#  vcpkgRepo: 'https://github.com/microsoft/vcpkg.git'
#  vcpkgRef: <ref>

  # Repository with additional port and triplet overlays
#  vcpkgOverlayRepo: ''
#  vcpkgOverlayRef: ''

  # CMake build options
#  cmakeListsTxtPath: '$(Build.SourcesDirectory)/CMakeLists.txt'
#  buildConfigurations: [Debug, RelWithDebInfo]
  
#  cmakeConfigArgs: '-DMAKESHIFT_BUILD_TESTS=ON -DCMAKESHIFT_PRIVATE_COMPILE_SETTINGS=$<$<CONFIG:Debug>:runtime-checks;debug-stdlib>' # optional
#  targets: []
#  targets.image: 'windows-2019'
#  targets.compiler: 'MSVC'
#  targets.platforms: [x64]
#  targets.compilerVersions: [2019]
#  targets.cmakeConfigArgs: ''
#  targets.buildConfigurations: []
  image: 'windows-2019'
  buildConfigurations: [Debug, RelWithDebInfo]
  compilers: []
#  compilers.platforms: [x64]
#  compilers.versions: [2019]

jobs:
#- ${{ each target in parameters.targets }}:
#  - ${{ each platform in target.platforms }}:
#    - ${{ each compilerVersion in target.compilerVersions }}:
- ${{ each compiler in parameters.compilers }}:
  - ${{ each platform in compiler.platforms }}:
    - ${{ each compilerVersion in compiler.versions }}:
      - job: 'Windows_${{ compiler.compiler }}_${{ compilerVersion }}_${{ platform }}'
        pool:
          name: Azure Pipelines
          vmImage: ${{ parameters.image }}

        steps:
        - task: CacheBeta@1
          displayName: Cache dependencies
          inputs:
            key: '$(Build.SourcesDirectory)/ci/vcpkg.txt | "${{ variables.vcpkgRef }}" | "${{ variables.vcpkgOverlayRef }}" | "${{ platform }}-$(Agent.OS)${{ variables.vcpkgTripletSuffix }}" | "${{ compiler.compiler }}" | "${{ variables.revision }}"'
            path: '$(Build.BinariesDirectory)/dependencies'
            cacheHitVar: 'dependencyCacheHit'
            condition: ne(variables.vcpkgRef, '')

        - powershell: |
            if ("${{ compiler.compiler }}" -eq "Clang") {
                & choco install -y llvm
            }
          displayName: Install tools
          condition: eq(variables['Agent.OS'], 'Windows_NT')

        - powershell: |
            if ("$env:vcpkgRef" -and !"$env:vcpkgRepo") {
                Write-Host "##vso[task.setvariable variable=vcpkgRepo]https://github.com/microsoft/vcpkg.git"
            }
            if (!"$env:cmakeListsTxtPath") {
                Write-Host "##vso[task.setvariable variable=cmakeListsTxtPath]$(Build.SourcesDirectory)/CMakeLists.txt"
            }
            Write-Host "##vso[task.setvariable variable=Path]$(Build.BinariesDirectory)/dependencies/cmake/bin;${env:Path}"
            Write-Host "##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/dependencies/vcpkg"
            Write-Host "##vso[task.setvariable variable=VCPKG_TRIPLET]${{ platform }}-windows${{ variables.vcpkgTripletSuffix }}"
            if ("${{ compiler.compiler }}" -eq "Clang") {
                #$vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                #$clangClPath = Join-Path $vsPath 'VC\Tools\Llvm\bin\clang-cl.exe'
                $clangClPath = "${env:ProgramFiles}\LLVM\bin\clang-cl.exe"
                $clangClCompatPath = $clangClPath -replace '\\','/'
                Write-Host "##vso[task.setvariable variable=cmakeCompilerFlag]-DCMAKE_C_COMPILER=`"$clangClCompatPath`" -DCMAKE_CXX_COMPILER=`"$clangClCompatPath`""
            }
          displayName: Set environment variables
          condition: eq(variables['Agent.OS'], 'Windows_NT')

        - powershell: |
            if ("$env:vcpkgOverlayRepo") {
                & git clone --depth 1 "$env:vcpkgOverlayRepo" "$(Build.BinariesDirectory)/dependencies/overlay-repo"
            }
            mkdir -Force "$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports"
            mkdir -Force "$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets"
          displayName: Clone Vcpkg overlay repository
          condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''), eq(variables['Agent.OS'], 'Windows_NT'))

        - task: run-vcpkg@0
          displayName: Run Vcpkg to install dependencies
          inputs:
            vcpkgDirectory: '$(Build.BinariesDirectory)/dependencies/vcpkg'
            vcpkgGitCommitId: '$(vcpkgRef)'
            vcpkgTriplet: '${{ variables.VCPKG_TRIPLET }}'
            vcpkgArguments: '--overlay-ports="$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports" --overlay-triplets="$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets" "@$(Build.SourcesDirectory)/ci/vcpkg.txt"'
            condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''))

        - script: |
            rmdir /S /Q "$(Build.BinariesDirectory)/dependencies/vcpkg/buildtrees"
            rmdir /S /Q "$(Build.BinariesDirectory)/dependencies/vcpkg/downloads"
            rmdir /S /Q "$(Build.BinariesDirectory)/dependencies/vcpkg/packages"
          displayName: Delete temporary files
          condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''), eq(variables['Agent.OS'], 'Windows_NT'))

        - ${{ each config in parameters.buildConfigurations }}:
          - task: run-cmake@0
            displayName: 'Build ${{ config }}'
            inputs:
              cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
              cmakeListsTxtPath: '$(cmakeListsTxtPath)'
              useVcpkgToolchainFile: true
              buildDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'
              cmakeAppendedArgs: '-G Ninja ${{ variables.cmakeCompilerFlag }} -DCMAKE_BUILD_TYPE=${{ config }} ${{ variables.cmakeConfigArgs }}'
              buildWithCMakeArgs: '--parallel -- -v'

          - script: |
              ctest -V -T Test
            displayName: 'Run tests in ${{ config }}'
            workingDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'

        - task: PublishTestResults@2
          displayName: Publish test results
          inputs:
            testResultsFormat: 'cTest'
            testResultsFiles: '$(Build.BinariesDirectory)/build/*/Testing/*/Test.xml'
            testRunTitle: '$(Agent.JobName)-${{ compiler.compiler }}-${{ compilerVersion }}-${{ platform }}'
