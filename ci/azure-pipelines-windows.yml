# Azure Pipelines job template for CMake builds
# Revision 1
# Author: Moritz Beutel

## Variables:
#  revision:

### Vcpkg repository
#  vcpkgRepo: 'https://github.com/microsoft/vcpkg.git' # optional
#  vcpkgRef:

### Repository with additional port and triplet overlays
#  vcpkgOverlayRepo: '' # optional
#  vcpkgOverlayRef: '' # optional

### Vcpkg options
#  vcpkgArgs: '' # optional
#  vcpkgTriplet: '' # optional

### CMake build options
#  cmakeListsTxtPath: '$(Build.SourcesDirectory)/CMakeLists.txt' # optional
#  cmakeConfigArgs: '' # optional
#  ninjaBuildArgs: '' # optional

### Operating system
# os: '' # optional

parameters:
  os: '' # overrides the eponymous variable
  buildConfigurations: [Debug, RelWithDebInfo]
  cmakeConfigArgs: '' # appends to the eponymous variable
  ninjaBuildArgs: '' # appends to the eponymous variable
  vcpkgArgs: '' # appends to the eponymous variable
  vcpkgTriplet: '' # overrides the eponymous variable
  compilers: []
#    compiler.os: '' # overrides the eponymous parameter
#    compiler.platforms: []
#    compiler.versions: []
#    compiler.cmakeConfigArgs: '' # appends to the eponymous parameter
#    compiler.ninjaBuildArgs: '' # appends to the eponymous parameter
#    compiler.vcpkgArgs: '' # appends to the eponymous parameter
#    compiler.vcpkgTriplet: '' # overrides the eponymous parameter

jobs:
- ${{ each compiler in parameters.compilers }}:
  - ${{ each platform in compiler.platforms }}:
    - ${{ each compilerVersion in compiler.versions }}:
      - job: '${{ coalesce(compiler.os, parameters.os, variables.os) }}_${{ compiler.compiler }}${{ compilerVersion }}_${{ platform }}'
        pool:
          name: Azure Pipelines
          ${{ if eq(coalesce(compiler.os, parameters.os, variables.os), 'Windows') }}:
            vmImage: 'windows-2019'
          ${{ if eq(coalesce(compiler.os, parameters.os, variables.os), 'Linux') }}:
            vmImage: 'ubuntu-18.04'
          ${{ if eq(coalesce(compiler.os, parameters.os, variables.os), 'MacOS') }}:
            vmImage: 'macOS-10.14'

        steps:
        - pwsh: |
            if ("$env:vcpkgRef" -and !"$env:vcpkgRepo") {
                echo "##vso[task.setvariable variable=vcpkgRepo]https://github.com/microsoft/vcpkg.git"
            }
            if (!"$env:cmakeListsTxtPath") {
                echo "##vso[task.setvariable variable=cmakeListsTxtPath]$(Build.SourcesDirectory)/CMakeLists.txt"
            }
            if ($IsWindows) { $tripletOS = "windows" }
            elseif ($IsLinux) { $tripletOS = "linux" }
            elseif ($IsMacOS) { $tripletOS = "osx" }
            $vcpkgTriplet = "${{ coalesce(compiler.vcpkgTriplet, parameters.vcpkgTriplet, variables.vcpkgTriplet, '<platform>-<os>') }}" -replace "<os>","$tripletOS" -replace "<platform>","${{ platform }}"
            echo "##vso[task.setvariable variable=buildCacheKey]$env:vcpkgRepo $env:vcpkgRef $env:vcpkgOverlayRepo $env:vcpkgOverlayRef $env:vcpkgArgs $vcpkgTriplet ${{ compiler.compiler }} $env:revision 1"
            #echo "##vso[task.setvariable variable=Path]$(Build.BinariesDirectory)/dependencies/cmake/bin;${env:Path}"
            echo "##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/dependencies/vcpkg"
            echo "##vso[task.setvariable variable=VCPKG_TRIPLET]$vcpkgTriplet"
            if ($IsWindows) {
                if ("${{ compiler.compiler }}" -eq "Clang") {
                    #$vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                    #$clangClPath = Join-Path $vsPath 'VC\Tools\Llvm\bin\clang-cl.exe'
                    $clangClPath = "${env:ProgramFiles}\LLVM\bin\clang-cl.exe"
                    $clangClCompatPath = $clangClPath -replace '\\','/'
                    $cmakeCompilerFlag = "-DCMAKE_C_COMPILER=`"$clangClCompatPath`" -DCMAKE_CXX_COMPILER=`"$clangClCompatPath`""
                }
            }
            elseif ($IsLinux) {
                if ("${{ compiler.compiler }}" == "GCC") {
                    echo "##vso[task.setvariable variable=CC]gcc-${{ compilerVersion }}"
                    echo "##vso[task.setvariable variable=CXX]g++-${{ compilerVersion }}"
                }
                elseif ("${{ compiler.compiler }}" == "Clang") {
                    echo "##vso[task.setvariable variable=CC]clang-${{ compilerVersion }}"
                    echo "##vso[task.setvariable variable=CXX]clang++-${{ compilerVersion }}"
                }
            }
            elseif ($IsMacOS) {
                if ("${{ compiler.compiler }}" == "GCC") {
                    echo "##vso[task.setvariable variable=CXXFLAGS_OLD]$CXXFLAGS"
                    echo "##vso[task.setvariable variable=CXXFLAGS]$CXXFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
                    echo "##vso[task.setvariable variable=CC]gcc-${{ compilerVersion }}"
                    echo "##vso[task.setvariable variable=CXX]g++-${{ compilerVersion }}"
                }
            }
            echo "##vso[task.setvariable variable=finalCMakeConfigArgs]$cmakeCompilerFlag $env:cmakeConfigArgs ${{ parameters.cmakeConfigArgs }} ${{ compiler.cmakeConfigArgs }}"
            echo "##vso[task.setvariable variable=finalNinjaBuildArgs]$env:ninjaBuildArgs ${{ parameters.ninjaBuildArgs }} ${{ compiler.ninjaBuildArgs }}"
          displayName: Set environment variables

        - task: CacheBeta@1
          displayName: Cache dependencies
          inputs:
            key: '$(Build.SourcesDirectory)/ci/vcpkg.txt | "$(buildCacheKey)"'
            path: '$(Build.BinariesDirectory)/dependencies'
            cacheHitVar: 'dependencyCacheHit'
            condition: ne(variables.vcpkgRef, '')

        - pwsh: |
            if ($IsWindows) {
                if ("${{ compiler.compiler }}" -eq "Clang") {
                    & choco install -y llvm
                }
            }
            elseif ($IsLinux) {
                & wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
                & sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
                if ("${{ compiler.compiler }}" == "GCC") {
                    & sudo apt-add-repository ppa:ubuntu-toolchain-r/test
                }
                elseif ("${{ compiler.compiler }}" == "Clang") {
                    & sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ compilerVersion }} main"
                }
                & sudo apt-get update
                if ("${{ compiler.compiler }}" == "GCC") {
                    & sudo apt-get install cmake gcc-${{ compilerVersion }} g++-${{ compilerVersion }}
                }
                elseif ("${{ compiler.compiler }}" == "Clang") {
                    & sudo apt-get install cmake clang-${{ compilerVersion }}
                }
                mkdir -Force ~/bin
                & ln -s /usr/bin/cmake ~/bin/cmake
            }
            elseif ($IsMacOS) {
                & sudo xcode-select -s /Applications/Xcode_10.3.app/Contents/Developer
                & brew install gcc@9
                if ("${{ compiler.compiler }}" == "GCC") {
                    & brew install gcc@${{ compilerVersion }}
                }
            }
          displayName: Install tools

        - pwsh: |
            if ("$env:vcpkgOverlayRepo" -and "$env:vcpkgOverlayRef") {
                & git clone "$env:vcpkgOverlayRepo" "$(Build.BinariesDirectory)/dependencies/overlay-repo"
                cd "$(Build.BinariesDirectory)/dependencies/overlay-repo"
                & git checkout --quiet --force "$env:vcpkgOverlayRef"
                mkdir -Force "$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports"
                mkdir -Force "$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets"
                echo "##vso[task.setvariable variable=vcpkgOverlayArgs]--overlay-ports=`"$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports`" --overlay-triplets=`"$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets`"
            }
            else {
                echo "##vso[task.setvariable variable=vcpkgOverlayArgs]"
            }
          displayName: Clone Vcpkg overlay repository
          condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''))
        
        - task: run-vcpkg@0
          displayName: Run Vcpkg to install dependencies
          inputs:
            vcpkgDirectory: '$(Build.BinariesDirectory)/dependencies/vcpkg'
            vcpkgGitURL: '$(vcpkgRepo)'
            vcpkgGitCommitId: '$(vcpkgRef)'
            vcpkgTriplet: '$(VCPKG_TRIPLET)'
            vcpkgArguments: '$(vcpkgOverlayArgs) "@$(Build.SourcesDirectory)/ci/vcpkg.txt"'
          condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''))

        - pwsh: |
            Remove-Item -Recurse -Force "$(Build.BinariesDirectory)/dependencies/vcpkg/buildtrees"
            Remove-Item -Recurse -Force "$(Build.BinariesDirectory)/dependencies/vcpkg/downloads"
            Remove-Item -Recurse -Force "$(Build.BinariesDirectory)/dependencies/vcpkg/packages"
          displayName: Delete temporary files
          condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.vcpkgRef, ''))

        - pwsh: |
            if ("${{ compiler.compiler }}" == "GCC") {
                echo "##vso[task.setvariable variable=CXXFLAGS]$CXXFLAGS_OLD"
            }
            elseif ("${{ compiler.compiler }}" == "AppleClang") {
                & sudo xcode-select -s /Applications/Xcode_11.1.app/Contents/Developer
                echo "##vso[task.setvariable variable=CC]clang"
                echo "##vso[task.setvariable variable=CXX]clang++"
            }
          displayName: Set environment variables
          condition: eq(variables['Agent.OS'], 'Darwin')

        - ${{ each config in parameters.buildConfigurations }}:
          - task: run-cmake@0
            displayName: 'Build ${{ config }}'
            inputs:
              cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
              cmakeListsTxtPath: '$(cmakeListsTxtPath)'
              useVcpkgToolchainFile: true
              buildDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'
              cmakeAppendedArgs: '-G Ninja $(finalCMakeConfigArgs) -DCMAKE_BUILD_TYPE=${{ config }}'
              buildWithCMakeArgs: '--parallel -- -v $(finalNinjaBuildArgs)'

          - script: |
              ctest -V -T Test
            displayName: 'Run tests in ${{ config }}'
            workingDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'

        - task: PublishTestResults@2
          displayName: Publish test results
          inputs:
            testResultsFormat: 'cTest'
            testResultsFiles: '$(Build.BinariesDirectory)/build/*/Testing/*/Test.xml'
            testRunTitle: '$(Agent.JobName)'
